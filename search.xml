<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于</title>
    <url>/2022/01/03/about/</url>
    <content><![CDATA[<p>Richard Zhu</p>
<p>A coder from China, interested in quant, search engine, feed, ads</p>
<p>博客：<a href="https://rchardzhu.github.io/">https://rchardzhu.github.io</a></p>
<p>知乎：<a href="https://www.zhihu.com/people/richard-zhu">https://www.zhihu.com/people/richard-zhu</a></p>
<p>公众号: <img src="/images/wechat_channel.png" alt="诸葛说talk"></p>
]]></content>
      <tags>
        <tag>about</tag>
      </tags>
  </entry>
  <entry>
    <title>量化资源--awesome quant中文版发布</title>
    <url>/2022/01/08/awesome-quant-cn/</url>
    <content><![CDATA[<h1 id="awesome-quant-cn"><a href="#awesome-quant-cn" class="headerlink" title="awesome-quant-cn"></a>awesome-quant-cn</h1><p><a href="https://github.com/rchardzhu/awesome-quant-cn">awesome quant中文版</a>，最近会更新比较频繁，欢迎关注github以及加入qq群～</p>
<h2 id="金融数据"><a href="#金融数据" class="headerlink" title="金融数据"></a>金融数据</h2><ul>
<li><a href="https://waditu.com/document/1?doc_id=131">tushare</a> – 分为tushare和tushare pro。tushare pro数据覆盖范围广，接口调用简单,响应快速，但获取次数较多时有积分限制。老版api有下线风险</li>
<li><a href="https://github.com/akfamily/akshare">akshare</a> – 基于 Python 的财经数据接口库, 目的是实现对股票、期货、期权、基金、外汇、债券、指数、加密货币等金融产品的基本面数据、实时和历史行情数据、衍生数据从数据采集、数据清洗到数据落地的一套工具</li>
<li><a href="https://github.com/ranaroussi/yfinance">yfinace</a> – yahoo财经</li>
<li><a href="https://www.joinquant.com/help/api/help#name:JQData">jqdatasdk</a> – 聚宽提供的本地量化金融数据服务</li>
<li><a href="https://doc.shinnytech.com/tqsdk/latest/intro.html">tqsdk</a> – TqSdk免费版本提供全部的期货、商品/金融期权和上证50、沪深300和中证500的实时行情，TqSdk专业版可提供A股股票的实时和历史行情</li>
<li><a href="https://github.com/Micro-sheep/efinance">efinance</a> – 个人打造的用于获取股票、基金、期货数据的免费开源 Python 库</li>
<li><a href="https://github.com/shidenggui/easyquotation">easyquotation</a> – 快速获取新浪/腾讯的全市场行情</li>
</ul>
<h2 id="回测引擎"><a href="#回测引擎" class="headerlink" title="回测引擎"></a>回测引擎</h2><ul>
<li><a href="https://github.com/quantopian/zipline">zipline</a> – Quantopian开源的本地量化回测平台，可以和pyfolio和alphalen无缝衔接</li>
<li><a href="https://github.com/ricequant/rqalpha">rqalpha</a> – Ricequant开源的本地量化回测平台，在 API 设计上和 Quantopian 保持一致，但License完全排除商业用途</li>
<li><a href="https://github.com/mementum/backtrader">backtrader</a> – 纯python实现的在线交易和回测平台</li>
<li><a href="https://github.com/zvtvz/zvt/blob/master/README-cn.md">zvt</a> – 包含可扩展的数据recorder，api，因子计算，选股，回测，交易,以及统一的可视化，抽象度较高</li>
<li><a href="https://github.com/pmorissette/bt">bt</a> – 基于ffn打造的python回测框架， 目标是充分利用python生态，不重复造轮子</li>
</ul>
<h2 id="风险分析"><a href="#风险分析" class="headerlink" title="风险分析"></a>风险分析</h2><ul>
<li><a href="https://github.com/quantopian/pyfolio">pyfolio</a> – Quantopian开发的用于金融投资组合性能和风险分析的Python库</li>
<li><a href="https://github.com/quantopian/empyrical">empyrical</a> – Quantopian开源的常见金融风险指标</li>
<li><a href="https://github.com/ranaroussi/quantstats">quantstats</a> – 更深层次的python量化分析和风险指标</li>
</ul>
<h2 id="实盘交易"><a href="#实盘交易" class="headerlink" title="实盘交易"></a>实盘交易</h2><ul>
<li><a href="https://github.com/vnpy/vnpy">vnpy</a> – 基于Python的开源量化交易系统开发框架</li>
<li><a href="https://openapi.futunn.com/futu-api-doc/intro/intro.html">Futu OpenAPI</a> – 功能主要有两部分：行情和交易。支持香港、美国、A 股市场的行情数据，涉及的品类包括股票、指数、期权、期货等；支持香港、美国、A 股、新加坡、日本 5 个市场的交易能力，涉及的品类包括股票、期权、期货等</li>
<li><a href="https://quant.itiger.com/openapi/py-docs/zh-cn/docs/intro/quickstart.html">tigeropen</a> – 老虎开放平台提供的直接管理交易、查看帐户信息、查询行情变动及交易支持功能</li>
</ul>
<h2 id="策略研究平台"><a href="#策略研究平台" class="headerlink" title="策略研究平台"></a>策略研究平台</h2><ul>
<li><a href="https://www.joinquant.com/">聚宽</a> – 量化平台，提供多种数据方便投资研究；提供多种的策略评价指标与评价维度；支持多种策略的编写、回测、模拟、实盘</li>
<li><a href="https://www.ricequant.com/">米筐</a> – 米筐科技专注于为用户提供快速便捷、功能强大的量化交易和分析工具。用户可以使用基于浏览器（网上回测平台）或本地化（RQAlpha 等项目）的米筐科技产品，随时、随地开发自己的交易策略，验证自己的投资思路</li>
<li><a href="https://uqer.datayes.com/">优矿</a> – 量化平台，使用通联书记，支持回测功能</li>
</ul>
<h2 id="量化书籍"><a href="#量化书籍" class="headerlink" title="量化书籍"></a>量化书籍</h2><ul>
<li><a href="https://book.douban.com/subject/2339892/">海龟交易法则</a> – 豆瓣评分8.5分。原版海龟首次揭密适用于任何市场的交易策略</li>
</ul>
<h2 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h2><ul>
<li><a href="https://github.com/wilsonfreitas/awesome-quant">awesome-quant</a> – 可以参考</li>
</ul>
<h2 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h2><p>欢迎加入qq群交流，qq群号：835894006</p>
]]></content>
      <categories>
        <category>python</category>
        <category>quant</category>
      </categories>
      <tags>
        <tag>quant</tag>
        <tag>awesome</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>常用量化回测数据/收益指标的一些说明</title>
    <url>/2022/02/06/common-invest-indicator-md/</url>
    <content><![CDATA[<h2 id="常用数据-收益指标"><a href="#常用数据-收益指标" class="headerlink" title="常用数据/收益指标"></a>常用数据/收益指标</h2><ol>
<li>无风险利率(Risk-Free Rate)</li>
</ol>
<ul>
<li>无风险利率表示投资者在一定时间内能够期望从无任何风险的投资中获得的利率。现实中，通常使用伦敦同业拆放利率（London Inter bank Offered Rate，LIBOR）或美国国债利率作为无风险利率。因为一般认为金融机构倒闭的机会很低，财政有问题的银行会被禁止参与同业拆放，因此LIBOR是没有风险的。政府可以发行主权货币应付到期的债务，因此国债不可能违约。不过，此说法并不适用于欧元。欧元区国家无权发行货币，因此发生了欧洲主权债务危机</li>
</ul>
<ol start="2">
<li>Cumulative Return &amp; 复合年均增长率(cagr：Compound Annual Growth Rate)</li>
</ol>
<ul>
<li>Cumulative Return：累计收益= (Ending Value/Beginning Value)</li>
<li>cagr计算方法为：总增长率百分比的n方根，n相等于有关时期内的年数。CAGR = (Ending Value/Beginning Value)^(1/# of years)－1</li>
</ul>
<ol start="3">
<li>总杠杆(gross leverage)</li>
</ol>
<ul>
<li>总杠杆率是敞口绝对值的总和除以净资产（Net asset value,简称NAV），不考虑多空抵消和对冲。1亿美元标普500股票的长仓和1亿美元的标普500期货空仓总杠杆率为200%。这一指标反映的是总体投资活动水平，是交易对手风险和流动性风险的关注对象之一</li>
</ul>
<ol start="4">
<li>最大回撤(Max Drawdown)</li>
</ol>
<ul>
<li>描述策略可能出现的最糟糕的情况，是指在某一段时期内产品净值从最高点开始回落到最低点的幅度。具体计算方法为：max(1 - 策略当日价值 / 当日之前产品最高净值)</li>
<li>举例说明：2010年7月20日初始净值1；恰逢2010年10月美国推出QE2全球股市大涨，该基金净值增长到1.8；其后国内股市剧烈震荡，截止2011年4月25，该基金净值为0.98.假设投资者在最高峰时期认购，半年后在最低潮时期赎回，亏损45.5%。这就是最大回撤率给高位追买的投资者的指示意义</li>
</ul>
<ol start="5">
<li>波动率(Volatility)</li>
</ol>
<ul>
<li>是金融资产价格的波动程度，是对资产收益率不确定性的衡量，用于反映金融资产的风险水平。波动率越高，金融资产价格的波动越剧烈，资产收益率的不确定性就越强；波动率越低，金融资产价格的波动越平缓，资产收益率的确定性就越强。具体计算方法为：策略每日收益的年化标准差</li>
</ul>
<ol start="6">
<li>胜率(win rate)</li>
</ol>
<ul>
<li>胜率的定义是赢钱次数除以总买入次数</li>
<li>举例说明：投入十次，七次盈利，三次亏损，胜率就是70%</li>
</ul>
<ol start="7">
<li>胜负比(win loss ratio)</li>
</ol>
<ul>
<li>胜负比也称为“成功率”。赢/亏比率是赢的交易总数与输的交易数之比。它不考虑赢或输了多少钱，只考虑输赢次数</li>
</ul>
<ol start="8">
<li>盈亏比(risk return ratio)</li>
</ol>
<ul>
<li>也叫赔率。指的是每次交易的盈利和亏损的比例，代表投资的风险收益比。投资系统的盈亏比=一段时间所有投资盈利单的盈利之和/相同时间段所有亏损单的亏损之和。投资的收益盈亏比是3是指平均来讲赚3块钱，要付出1块的止损。或者说冒一块钱的风险的一项投资获利了3块。长期来看，投资盈亏比，才是直接反映投资者综合水平的的一个量化指标</li>
<li>长期稳定赚大钱的成功者的系统，都是高盈亏比的系统。只有高盈亏比系统，才能成为成功者，才能算稳定盈利</li>
<li>举例说明：平均每次盈利30%，平均每次亏损10%，盈亏比就是3倍</li>
</ul>
<ol start="9">
<li>阿尔法（alpha、α值）</li>
</ol>
<ul>
<li>投资者获得与市场波动无关的回报，也叫超额收益。 比如投资者获得了15%的回报，其基准获得了10%的回报，那么Alpha或者价值增值的部分就是5%</li>
</ul>
<ol start="10">
<li>贝塔（beta、β值）</li>
</ol>
<ul>
<li>反映了策略对大盘变化的敏感性。例如一个策略的Beta为1.5，则大盘涨1%的时候，策略可能涨1.5%，反之亦然。具体计算方法为：策略每日收益与参考标准每日收益的协方差/参考标准每日收益的方差。</li>
<li>Beta coefficient = Covariance(R<del>e</del>, R<del>m</del>)/Variance(R<del>m</del>)<br>其中：R<del>e</del>为单一股票的回报， R<del>m</del>为整体市场的回报，Covariance为股票收益相对整体市场收益的变化情况， Variance为市场数据远离平均值的幅度</li>
</ul>
<ol start="11">
<li>夏普比率(sharpe ratio)</li>
</ol>
<ul>
<li>夏普比率描述了资产收益对投资者所承担风险的补偿程度。当以一个相同基准来比较两种资产之时，夏普比率较高的资产在相同风险下收益更好；或者说，如果收益相同的话，夏普比率较高的资产风险较低。但是，像其他任何数学模型一样，它依赖于数据的正确性</li>
<li>sharpe ratio = (R<del>p</del> - R<del>f</del>)/$\sigma$<del>p</del><br>其中R<del>p</del>为投资组合的收益，R<del>f</del>为无风险资产的收益，sigma<del>p</del>为投资组合超额收益的标准方差</li>
</ul>
<ol start="12">
<li>信息比例(information Ratio)</li>
</ol>
<ul>
<li>信息比率与夏普比率相似，主要区别在于夏普比率使用无风险收益(比如美国国债)作为基准，而信息比率使用风险指数作为基准（如标准普尔500指数）</li>
<li>具体计算方法为：(策略累积收益 - 基准累积收益)/策略与基准每日收益差值的标准差。【意义】：信息比率数值越大，业绩表现越好。它以马克维茨的均异模型为基础，可以衡量基金的均异特性，表示单位主动风险所带来的超额收益</li>
</ul>
<ol start="13">
<li>索提比例（sortino ratio）</li>
</ol>
<ul>
<li>与夏普比率类似，所不同的是它区分了波动的好坏，因此在计算波动率时它所采用的不是标准差，而是下行标准差。这其中的隐含条件是投资组合的上涨（正回报率）符合投资人的需求，不应计入风险调整。具体计算方法为：(策略收益-无风险利率)/策略下行波动率。【适用范围】：因为索提诺比率使用的是下行偏差来考虑风险，那么所有的下行偏差局限性也会出现在索提诺比率中。也就是必须要有足够多的“不良”观测，才能计算一个有效的索提诺比率。sortino 比率数值越大，业绩表现越好。</li>
</ul>
<ol start="14">
<li>卡玛比率(calmar ratio)</li>
</ol>
<ul>
<li>卡玛比率=超额收益/最大回撤(风险)</li>
<li>卡玛比率和卡玛比率的唯一不同之处就是分母不同，夏普比率使用标准差作为风险，卡玛比率使用最大回撤作为风险，本质上都是衡量基金的风险-回报关系</li>
</ul>
<ol start="15">
<li>Omega比率（omega ratio）</li>
</ol>
<ul>
<li>omega比率实际上考虑了收益的整个分布信息，因此包括了所有高阶矩的信息。在临界收益率等于均值的时候，Omega比率等于1。在相同的临界收益率下，对于不同的投资选择，Omega比率越大越好。适用范围：在收益率不服从正态分布的时候，Omega是非常好的替代。【意义】：Omega比率值越高,投资绩效也就越好</li>
</ul>
<ol start="16">
<li>Tail 比率（tail ratio）</li>
</ol>
<ul>
<li>日收益分布的95分位值/5分位值。【使用范围】：均值回归策略，这类型策略的最大风险在于左侧的尾部风险。单次的大额回撤需要很长的时间才能够恢复。因此 tail_ratio 很适合用来刻画这类策略面临的风险。【意义】：tail 比率越大越好，可以理解成衡量最好情况与最坏情况下的收益表现的指标。例如：tail_ratio = 0.25，5分位的亏损是95分位收益的四倍。 这样的策略在发生大额亏损的情况下很难在短时间内恢复</li>
</ul>
<ol start="17">
<li>Common sense比率（common sense ratio）</li>
</ol>
<ul>
<li>(日收益分布的95分位值/5分位值) *(总盈利/总亏损）。【使用范围】：均值回归策略，趋势追踪策略。【意义】：大于1时，策略盈利；小于1时，策略亏损</li>
</ul>
<ol start="18">
<li>skew值（Skewness）</li>
</ol>
<ul>
<li>亦称歪度，在概率论和统计学中衡量实数随机变量概率分布的不对称性。偏度的值可以为正，可以为负或者甚至是无法定义。在数量上，偏度为负（负偏态；左偏）就意味着在概率密度函数左侧的尾部比右侧的长，绝大多数的值（不一定包括中位数在内）位于平均值的右侧。偏度为正（正偏态；右偏）就意味着在概率密度函数右侧的尾部比左侧的长，绝大多数的值（不一定包括中位数）位于平均值的左侧。偏度为零就表示数值相对均匀地分布在平均值的两侧，但不一定意味着其为对称分布</li>
</ul>
<ol start="19">
<li>峰度（kurtosis）</li>
</ol>
<ul>
<li>大于0表示收益的分布与正态分布相比较为陡峭</li>
</ul>
<ol start="20">
<li>决定系数(coefficient of determination, R2)</li>
</ol>
<ul>
<li>累计对数收益对时间t的回归的R^2。【意义】：R平方值是趋势线拟合程度的指标，它的数值大小可以反映趋势线的估计值与对应的实际数据之间的拟合程度，拟合程度越高，趋势线的可靠性就越高。R平方值是取值范围在0～1之间的数值，也称为决定系数，最常用于评价回归模型优劣程度的指标</li>
</ul>
<h2 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h2><p>我发文章的几个地方，欢迎大家在朋友圈等地方分享，多多交流。</p>
<ul>
<li>微信公众号：诸葛说talk</li>
<li>知乎：<a href="https://www.zhihu.com/people/richard-zhu/posts">https://www.zhihu.com/people/richard-zhu/posts</a></li>
<li>博客：<a href="https://rchardzhu.github.io/">https://rchardzhu.github.io/</a></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>无风险利率: <a href="https://zh.wikipedia.org/wiki/%E6%97%A0%E9%A3%8E%E9%99%A9%E5%88%A9%E7%8E%87">wikipedia</a></li>
<li>cagr: <a href="https://www.investopedia.com/terms/c/cagr.asp">https://www.investopedia.com/terms/c/cagr.asp</a></li>
<li>波动率: <a href="http://abcexchange.io/terms/v/volatilityquotetrading.asp">http://abcexchange.io/terms/v/volatilityquotetrading.asp</a></li>
<li>胜负比: <a href="https://www.investopedia.com/terms/w/win-loss-ratio.asp">https://www.investopedia.com/terms/w/win-loss-ratio.asp</a></li>
<li>alpha: <a href="https://www.investopedia.com/terms/a/alpha.asp">https://www.investopedia.com/terms/a/alpha.asp</a></li>
<li>beta: <a href="https://www.investopedia.com/terms/b/beta.asp">https://www.investopedia.com/terms/b/beta.asp</a></li>
<li>sharpe: <a href="https://www.investopedia.com/terms/s/sharperatio.asp">https://www.investopedia.com/terms/s/sharperatio.asp</a></li>
<li>信息比例: <a href="https://www.investopedia.com/terms/i/informationratio.asp">https://www.investopedia.com/terms/i/informationratio.asp</a></li>
<li>sortino: <a href="https://www.investopedia.com/terms/s/sortinoratio.asp">https://www.investopedia.com/terms/s/sortinoratio.asp</a></li>
<li>calmar: <a href="https://www.investopedia.com/terms/c/calmarratio.asp">https://www.investopedia.com/terms/c/calmarratio.asp</a></li>
<li>skew: <a href="https://www.investopedia.com/terms/s/skewness.asp">https://www.investopedia.com/terms/s/skewness.asp</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
        <category>quant</category>
      </categories>
      <tags>
        <tag>quant</tag>
        <tag>python</tag>
        <tag>invest</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown实战笔记</title>
    <url>/2022/02/03/markdown-practice-md/</url>
    <content><![CDATA[<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。Markdown 编写的文档后缀为 .md, .markdown。</p>
<h2 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h2><ul>
<li>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推</li>
<li><code>*斜体文本*，**粗体文本**， ***粗斜体文本***</code></li>
<li>一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西</li>
<li>文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~即可</li>
<li>下划线可以通过 HTML 的 <code>&lt;u&gt;&lt;/u&gt;</code> 标签来实现</li>
<li>换行： 使用html <code>&lt;br&gt;</code>标签</li>
<li>脚注是对文本的补充说明<code>说明文本[^要注明的文本]</code> 在文末加上<code>[^要注明的文本]: markdown说明</code></li>
<li>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要加一个空格，然后再填写内容； 有序列表使用数字并加上 . 号来表示</li>
<li>使用反斜杠转义特殊字符，如*号，可以使用<code>\*</code>来解决</li>
<li>区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号。区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推。如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进</li>
<li>函数或片段的代码可以用反引号`把它包起来，可以用 ``` 包裹一段代码，并指定一种语言</li>
<li>链接：<code>[链接名称](链接地址) or &lt;链接地址&gt;</code></li>
<li>图片：<code>![alt 属性文本](图片地址) or ![alt 属性文本](图片地址 &quot;可选标题&quot;)</code>，如果想指定图片宽度高度，需要使用html的<code>&lt;img&gt;</code>标签，如<code>&lt;img src=&quot;http://www.xxx.com/xxx.jpg&quot; width=&quot;50%&quot;&gt;</code> </li>
<li>表格：使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。-: 设置内容和标题栏居右对齐，:- 设置内容和标题栏居左对齐， :-: 设置内容和标题栏居中对齐<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |， </span><br></pre></td></tr></table></figure></li>
<li>任务列表：<code>- [ ] foo， - [x] bar</code></li>
<li>公式： 要显示α，在”\alpha” 前后分别加上$，<code>$\alpha$</code>，上标 <code>$a^b$</code>，下标<code>$a_b$</code>，分数<code>$\frac&#123;3+8a&#125;&#123;5b+6&#125;$</code>， 求和 <code>$\sum&#123;3x^n&#125;$</code> 。其他写法参考<a href="https://rpruim.github.io/s341/S19/from-class/MathinRmd.html">Mathematics in R Markdown</a></li>
</ul>
<h2 id="markdown编辑软件"><a href="#markdown编辑软件" class="headerlink" title="markdown编辑软件"></a>markdown编辑软件</h2><ul>
<li><a href="https://marktext.app/">marktext</a> – 从官网下载，或者使用<code>brew install --cask mark-text</code>安装， 具体见<a href="https://github.com/marktext/marktext/blob/develop/docs/i18n/zh_cn.md#readme">marktext中文说明</a></li>
<li>visual code插件之Markdown All in One： 包括快捷键、公式等功能</li>
<li>visual code插件之Markdown Preview Enhanced： 除了实时预览外，还包括了其他许多有用的功能，包括mermaid, PlantUML, pandoc, PDF导出等功能</li>
<li><a href="https://typora.io/">typora</a> –  从1.0.0开始收费</li>
</ul>
<h2 id="markdown文件导出为html、doc、epub、pdf格式"><a href="#markdown文件导出为html、doc、epub、pdf格式" class="headerlink" title="markdown文件导出为html、doc、epub、pdf格式"></a>markdown文件导出为html、doc、epub、pdf格式</h2><ol>
<li>安装pandoc，<code>brew install pandoc</code></li>
<li>将markdown转成html: <code>pandoc -f markdown -t html ./test.md</code> </li>
<li>将markdown转成doc：<code>pandoc -f markdown -t html ./test.md | pandoc -f html -t docx -o test.docx</code></li>
<li>将markdown转成PDF，需要安装<a href="https://www.latex-project.org/">latex</a>。只要安装basicTex就可以了，大概100M+,安装完后运行：<code>pandoc -f markdown_github test.md -o test.pdf --latex-engine=xelatex -V mainfont=&quot;SimSun&quot;</code> 这个表明使用的是GitHub风格markdown语法</li>
<li>将markdown转成epub： <code>pandoc -f markdown  ./test.md -o test.epub</code></li>
</ol>
<h2 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h2><p>我发文章的几个地方，欢迎大家在朋友圈等地方分享，多多交流。</p>
<ul>
<li>微信公众号：诸葛说talk</li>
<li>知乎：<a href="https://www.zhihu.com/people/richard-zhu/posts">https://www.zhihu.com/people/richard-zhu/posts</a></li>
<li>博客：<a href="https://rchardzhu.github.io/">https://rchardzhu.github.io/</a></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/Markdown">markdown wikipedia</a></li>
<li><a href="https://github.github.com/gfm/">GitHub Flavored Markdown Spec</a> – github风味markdown规范增加了表格、删除线、自动链接和任务列表功能</li>
<li><a href="https://pandoc.org/demos.html">pandoc demos</a></li>
<li><a href="https://geek-docs.com/markdown/markdown-tutorial/markdown-mathematical-formula.html">Markdown数学公式</a></li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
        <category>tool</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>blog</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>python代码/编码规范--pep8和google的python代码规范</title>
    <url>/2022/02/02/python-coding-style/</url>
    <content><![CDATA[<p>当所有代码均保持一致的风格时，阅读别人的代码沟通成本最低，特别是在理解大型代码库时效率提升很大。python使用的比较多的代码规范包括2种，分别如下：</p>
<ul>
<li><a href="https://www.python.org/dev/peps/pep-0008/">pep8 python编码规范</a></li>
<li><a href="https://google.github.io/styleguide/pyguide.html">google python编码规范</a> </li>
</ul>
<p>pep8是python编码规范的事实标准，google python编码规范做了更多的说明，可以作为pep8的补充。这也意味着python社区开源贡献者基本都遵守pep8，但不一定遵守google的python编码规范。</p>
<h2 id="pep8的一些规则"><a href="#pep8的一些规则" class="headerlink" title="pep8的一些规则"></a>pep8的一些规则</h2><p>参考pep8的目录，摘取一些重要的规则，具体使用的时候可以通过工具来检测。</p>
<p>1.1 代码布局</p>
<ul>
<li>每个缩进级别使用4个空格；连续行使用垂直对齐或者使用悬挂式缩进(额外的4个空格缩进)</li>
<li>空格是首选的缩进方法</li>
<li>每行最多79个字符</li>
<li>二元运算符前后换行都允许，只要代码保持一致就行。对于新代码建议在二元运算符前进行换行</li>
<li>空白行：使用两个空白行分隔顶层函数和类定义；类方法定义使用一个空行分隔；使用额外的空白行来分隔相关逻辑功能</li>
<li>文件应该使用UTF-8编码, 且不应该有编码声明</li>
<li>导入多个库函数应该分开依次导入；导入总是放在文件的顶部，在任何模块注释和文档字符串之后，在模块全局变量和常量之前；导入应按以下顺序进行：标准库导入、有关的第三方库进口、本地应用程序/库特定的导入，每组导入直接用空行分隔；避免通配符导入（import *）</li>
</ul>
<p>1.2 字符串</p>
<ul>
<li>单引号字符串和双引号字符串相同，代码保持一致即可</li>
<li>对于三引号字符串，常用三个双引号作文档字符串，文档字符串常用在模块的开端用以说明模块的基本功能，或紧跟函数定义的后面用以说明函数的基本功能</li>
</ul>
<p>1.3 空格</p>
<ul>
<li>避免使用无关的空格，包括空格内、逗号分号前面等</li>
<li>避免在行末使用空格</li>
<li>二元运算符在两侧使用一个空格</li>
<li>当用于指示关键字参数或默认参数值时，不要在=符号周围使用空格</li>
</ul>
<p>1.4 使用尾部逗号(trailing commas)</p>
<ul>
<li>尾部逗号通常可选，除了用来说明是只有一个元素的元组tuple时</li>
<li>当参数、值等列表期望经常扩展时，通常是每个值一行，再加上一个尾部逗号</li>
</ul>
<p>1.5 注释</p>
<ul>
<li>代码更改时，相应的注释也要随之高优更改</li>
<li>注释应该是完整的语句，第一个单词应该大写，除非它是特定标识符</li>
<li>块注释：缩进到与该代码相同的级别。块注释的每一行都以＃和一个空格开始</li>
<li>行注释：对某一语句行进行注释，注释应该与语句至少隔开两个空格，用＃和一个空格开始</li>
<li>对于公共的modules, functions, classes, and methods，需要写文档字符串</li>
<li>注释应该是完整的语句，第一个单词应该大写，除非它是特定标识符 </li>
</ul>
<p>1.6 命名约定</p>
<ul>
<li>python命名规范有点混乱，很难完全保存一致。对于新模块和包，应该遵守这些新的约定，已存在的库内部一致性更重要</li>
<li>命名应该反应其用途而非实现</li>
<li>不要将字符’l’（小写字母l），’O’（大写字母o）或’I’（大写字母I）作为单个字符变量名称</li>
<li>模块名应该使用简短、全小写的名字</li>
<li>类的命名采用驼峰命名法，即每个单词的首字母大写</li>
<li>函数名称应该是小写的，为了提高可读性，必须使用由下划线分隔的单词</li>
</ul>
<h2 id="google-python编码规范的一些规则"><a href="#google-python编码规范的一些规则" class="headerlink" title="google python编码规范的一些规则"></a>google python编码规范的一些规则</h2><p>相比pep8，google编码规范对怎么写代码的细节要求更多。比如怎么使用异常，文档字符串怎么写，Todo注释的使用等。参考规范目录摘取一些重要的规则说明</p>
<p>2.1 背景</p>
<ul>
<li>可以使用yapf自动格式化工具来格式化代码 </li>
</ul>
<p>2.2 python语言规则</p>
<ul>
<li>使用google的pylintrc配置文件来允许pylint</li>
<li>只对包和模块使用import语句，不对单个类或函数使用import</li>
<li>使用绝对路径导入每个模块</li>
<li>可以使用异常但必须非常小心。不要使用assert语句来验证api的参数值；最小化try/except代码块</li>
<li>避免全局变量</li>
</ul>
<p>2.3 python风格规则</p>
<ul>
<li>不使用分号作为行尾，不使用分号将2个语句放到同一行</li>
<li>不要在return语句或条件语句使用括号，除非使用括号来表示连续行或元组</li>
<li>每行最长80个字符，每个缩进级别使用4个空格，空行、空格跟pep8基本一致</li>
<li>main文件使用#!/usr/bin/env python3 或#!/usr/bin/python3开头，绝大部分文件不需要使用#！开头</li>
<li>每个文件应该包含一个版权声明</li>
<li>使用 f-string，%操作符或者format函数来格式化字符串</li>
<li>使用TODO注释说明临时的、短期的解决方案</li>
</ul>
<p>2.4 保持一致性</p>
<h2 id="python编码规范检查工具"><a href="#python编码规范检查工具" class="headerlink" title="python编码规范检查工具"></a>python编码规范检查工具</h2><p>光有规范不行，需要有配套的检查工具，方便团队开发代码时统一遵守</p>
<p>比如我用pycharm来编写Python代码时，如果有出现不符合PEP 8规范的话，pycharm就会提示我，如图所示。<br><img src="https://pic2.zhimg.com/80/v2-3a4fb851d10c2e8036bb977c861d66d1_720w.jpg" alt="pycharm提示"></p>
<p>更多工具如下：</p>
<ul>
<li><a href="https://pypi.org/project/pycodestyle/">pycodestyle</a> – pycodestyle是一款简单的代码检查工具，之前名字叫pep8，为了减少混淆改名成pycodestyle</li>
<li><a href="https://pylint.org/">pylint</a> – pylint是代码检查工具，不能自动修改代码，有对于的配置文件，可以参考<a href="https://google.github.io/styleguide/pylintrc">google开源的pylintrc配置文件</a></li>
<li><a href="https://pypi.org/project/pyflakes/">PyFlakes</a> – 一个简单的python错误检查工具,通过解析源代码而不是import来检测不同的错误，通常只能检查出一些逻辑错误</li>
<li><a href="https://pypi.org/project/flake8/">flake8</a> – 针对PEPE8进行代码规范提示，是对PyFlakes，pycodestyle的封装</li>
<li><a href="https://github.com/hhatto/autopep8">autopep8</a> – autopep8是一款将python代码自动排版为PEP8风格的工具，它使用 pycodestyle来决定哪部分代码需要格式化</li>
<li><a href="https://github.com/google/yapf/">yapf</a>–yapf是google开源的一个用于格式化Python代码的工具，可以一键美化代码，支持两种规范：PEP8和Google Style</li>
</ul>
<h2 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h2><p>我发文章的几个地方，欢迎大家在朋友圈等地方分享，多多交流。</p>
<ul>
<li>微信公众号：诸葛说talk</li>
<li>知乎：<a href="https://www.zhihu.com/people/richard-zhu/posts">诸葛说</a></li>
<li>博客：<a href="https://rchardzhu.github.io/">https://rchardzhu.github.io/</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
        <category>quant</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>google</tag>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title>python gui与pyside</title>
    <url>/2022/03/13/python-gui-and-pyside-md/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li><a href="https://docs.python.org/3/library/tkinter.html">Tkinter</a> – Tcl/Tk的python接口，python标准库自带不需单独安装。但界面相对简陋，基础组件不全，框架功能相对较弱，使用不多</li>
<li><a href="https://www.wxpython.org/">wxPython</a> – wxWidgets的python封装接口</li>
<li><a href="https://github.com/PySimpleGUI/PySimpleGUI">PySimpleGUI</a> – 对tkinter, Qt, WxPython等python gui框架的进一步封装</li>
<li><a href="https://riverbankcomputing.com/software/pyqt/intro">PyQt</a> –  Riverbank Computing公司发布的对QT框架的python封装，GPL授权</li>
<li><a href="https://wiki.qt.io/Qt_for_Python">PySide</a> – QT官方发布的QT python封装，LGPL授权，可以闭源发布。 qt官方给出的<a href="https://wiki.qt.io/Differences_Between_PySide_and_PyQt">Pyside和PyQt差异</a>，除了包名、工具名外，大部分差别不大</li>
</ul>
<h2 id="pyside6介绍"><a href="#pyside6介绍" class="headerlink" title="pyside6介绍"></a>pyside6介绍</h2><ol>
<li>安装<br>安装前提：Python 3.6+。使用venv或conda创建一个新的python环境。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -n qt python=3.8</span><br><span class="line">conda activate qt</span><br></pre></td></tr></table></figure>
or <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m venv pyside</span><br><span class="line">source pyside/bin/activate</span><br></pre></td></tr></table></figure>
然后使用pip安装pyside6 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pyside6 # 安装最新版本</span><br><span class="line">pip install pyside6==6.0 # 安装6.0版本</span><br></pre></td></tr></table></figure>
测试安装是否成功<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import PySide6.QtCore</span><br><span class="line">&gt;&gt;&gt; print(PySide6.__version__)</span><br><span class="line">6.2.1</span><br><span class="line">&gt;&gt;&gt; print(PySide6.QtCore.__version__)</span><br><span class="line">6.2.1</span><br></pre></td></tr></table></figure>
除了pyside6 lib库安装好外，还安装了pyside6-designer、pyside6-uic、pyside6-rcc等工具。</li>
</ol>
<ul>
<li>pyside6-uic: 从.ui文件生成python代码，<code>pyside6-uic -i form.ui -o ui_form.py</code></li>
<li>pyside6-rcc： 从.qrc文件生成python代码，<code>pyside6-rcc -i resources.qrc -o rc_resources.py</code></li>
<li>pyside6-designer： Qt Designer对应的命令行程序，用于编辑/创建.ui文件</li>
</ul>
<ol start="2">
<li>hello qt程序<br>将下列代码保存为hello_py.py，在终端运行python hello_py.py即可。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PySide6.QtWidgets import QApplication, QLabel</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line">label = QLabel(&quot;Hello Qt for Python!&quot;)</span><br><span class="line">label.show()</span><br><span class="line">app.exec()</span><br></pre></td></tr></table></figure>
说明：</li>
</ol>
<ul>
<li>QLabel是一个可以展示文本和图片的组件，文本可以是普通文本或富文本，比如html</li>
<li>QApplication app.exec()进入Qt主循环并且开始执行Qt代码</li>
</ul>
<ol start="3">
<li>开发环境</li>
</ol>
<ul>
<li>vs code安装插件：Qt for Python</li>
<li>qt creator</li>
<li>pycharm配置外部工具</li>
</ul>
<ol start="4">
<li>核心概念</li>
</ol>
<ul>
<li><p>Qt包括很多组件和模块，比如qtbase是一个包含很多模块的基础组件，它包含的module有：QtCore, QtGui, QtWidgets, QtNetwork等。所有这些module包含了很多你可以直接使用的类，比如QtCore里面包含了QFile, QTime, QByteArray等类。</p>
</li>
<li><p>QtWidgets是一个提供了很多预定义Widgets的模块，这些Widgets你可以添加到图形应用程序里面，包括Buttons, Labels, Boxes, Menus等。</p>
</li>
<li><p>QML提供了另外一种不同于Widgets的创建用户界面的方法，它首先的动机是应用于移动应用开发，但也可以在桌面应用开发中使用。QML跟Qt Quick模块一起，提供了使用点击、拖放、动画、过渡等与移动设备交互的方式。你可以在QML/Quick应用中找到的元素都聚焦于提供更现代的应用中</p>
</li>
</ul>
<p>Qt基本模块有三部分：</p>
<ul>
<li>QtCore: 提供了核心的非GUI功能，比如signal和slots，properties，序列化等</li>
<li>QtGui: 在GUI功能上扩展了QtCore的功能，比如：Events, windows and screens, OpenGL and raster-based 2D绘图，还有图片</li>
<li>QtWidgets: 提供了现成的组件，包括UI的图形元素</li>
</ul>
<p>QML and Qt Quick使用这些模块从python跟QML语言交互</p>
<ul>
<li>QtQML: 跟模块交互的基础python api</li>
<li>QtQuick: 在Qt应用中提供了类嵌入Qt Quick</li>
<li>QtQuickWidgets: 在基于widget的应用中提供了QQuickWidget类来前乳Qt Quick</li>
<li>Shiboken模块：使用python来扩展Qt/C++ 应用</li>
</ul>
<ol start="5">
<li>Qt Widgets: </li>
</ol>
<ul>
<li>signals and slots: 用于QObject对象之间的通信。按钮点击时，click就是信号，槽位是当按钮被点击时发生的事情，比如关闭窗口，保存文件等。类似于其他的callback回调，但回调不是很自然</li>
<li>所有继承自QObject或它的子类的类(比如QWidget)都可以包含信号和槽位。当对象改变状态，且这个状态其他对象感兴趣时，对象可以发出信号</li>
<li>槽位可以用于接收信号，但他们也是普通成员函数。就像一个对象不知道是否有对象接收了它的信号一样，一个槽位也不知道是否有信号连接到它了。这确保了可以用Qt来创建真正独立的组件</li>
<li>一个槽位可以连接任意多的信号，一个信号也可以连接到任意多的槽位。连接一个信号到另外一个信号也是可能的</li>
<li>Qt widgets有许多预定义的信号和槽位，你可以创建继承自PySide6 widgets的任何类</li>
<li>Qt 自带的layout-support功能可以帮你在应用程序中组织widgets。QVBoxLayout用于垂直布局widgets，QTableWidget用于以表格形式展示信息, QTreeWidget，QTreeView用树的形式展示信息</li>
</ul>
<ol start="6">
<li>使用ui文件</li>
</ol>
<ul>
<li><p>Qt Designer时一个图形UI设计工具，可以使用 Qt Designer基于Qt Widgets创建图形界面，它作为一个单独程序pyside6-designer或者嵌入到Qt Creator IDE。<a href="https://doc.qt.io/qtcreator/creator-using-qt-designer.html">Using Qt Designer</a>.设计存储在.ui文件中，是基于XML格式的文档. 可以使用pyside6-uic在编译时将设计转换成python/c++代码。</p>
</li>
<li><p>可以使用QtUiTools模块里面的类来直接加载ui文件</p>
</li>
<li><p><a href="https://doc.qt.io/qtforpython/tutorials/basictutorial/uifiles.html">从Designer或QtCreator用QUiLoader和pyside6-uic使用.ui文件</a></p>
</li>
</ul>
<ol start="7">
<li>其他功能</li>
</ol>
<ul>
<li><p><a href="https://doc.qt.io/qtforpython/tutorials/basictutorial/qrcfiles.html">Using .qrc Files (pyside6-rcc)</a> – Qt资源系统是一个可以用来在应用程序中存储二进制文件的机制，这些文件可以嵌入到应用程序并且可以被QFile类和QIcon、QPixmap类的构造函数来访问，文件名用:/来开始。最常见的使用情况时自定义的图片、图标、字体等 </p>
</li>
<li><p>Qt Linguist和它相关的工具可以用来提供应用程序多语言的翻译功能，参考<a href="https://doc.qt.io/qtforpython/tutorials/basictutorial/translations.html">Translating Applications</a></p>
</li>
<li><p>Qt Widgets应用使用一个依赖于底层平台的默认主题。在某些情况，存在一些系统范围的配置可以用来修改Qt主题，也可以自己的widgets并为每个组件提供一个自定义的style. 参考<a href="https://doc.qt.io/qtforpython/tutorials/basictutorial/widgetstyling.html">Styling the Widgets Application</a></p>
</li>
<li><p>QML是一个声明式语言，可以让你比传统语言(c++)更快的开发应用程序。由于它的声明特性，非常适合设计应用程序的UI。在QML，一个用户界面被指定为带有属性的对象树</p>
</li>
<li><p>一个PySide6/QML应用程序由至少2个不同的文件组成–一个是QML描述的用户界面文件，另外一个是用于load QML文件的python文件。QtQml和QtQuick模块提供了基于QML的UI的必要功能</p>
</li>
<li><p>Shiboken 擅长Qt相关的binding生成，这意味着任何Qt/C++项目可以很容易暴露给python。另外，Shiboken也提供了对于非Qt的c++项目的支持</p>
</li>
</ul>
<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><ul>
<li><a href="https://doc.qt.io/qtforpython/tutorials/expenses/expenses.html">费用工具教程</a></li>
<li><a href="https://doc.qt.io/qtforpython/examples/index.html">更多pyside示例</a>–在pyside6安装环境site-packages/PySide6/examples目录下，包括3d、画图、多媒体、网络、数据可视化等多个分类</li>
<li><a href="https://github.com/vnpy/vnpy_ctabacktester/blob/main/vnpy_ctabacktester/ui/widget.py">vnpy qt</a></li>
</ul>
<h2 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h2><p>我发文章的几个地方，欢迎大家在朋友圈等地方分享，多多交流。</p>
<ul>
<li>微信公众号：诸葛说talk</li>
<li>知乎：<a href="https://www.zhihu.com/people/richard-zhu/posts">https://www.zhihu.com/people/richard-zhu/posts</a></li>
<li>博客：<a href="https://rchardzhu.github.io/">https://rchardzhu.github.io/</a></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.zhihu.com/question/32703639/answer/2311119286">为什么很多Python开发者写GUI不用Tkinter，而要选择PyQt和wxPython或其他？</a></li>
<li><a href="https://www.zhihu.com/question/306793447/answer/560109210">PyQt和PySide的历史渊源</a></li>
<li><a href="https://doc.qt.io/qtforpython/contents.html">Qt for Python官方完整教程</a></li>
<li><a href="https://doc.qt.io/qtforpython/quickstart.html">Qt for Python快速开始</a> – pyside6快速开始</li>
<li><a href="https://doc.qt.io/qtforpython/tutorials/pretutorial/whatisqt.html">pyside概念篇</a></li>
<li><a href="https://doc.qt.io/qtforpython/modules.html">pyside所有模块</a></li>
<li><a href="https://doc.qt.io/qtforpython/tutorials/index.html">pyside教程</a>–包括Qt Widgets、Quick/QML、General Applications基础教程</li>
<li><a href="https://doc.qt.io/qtforpython/tutorials/pretutorial/distribution.html">将应用程序分发到其他系统/平台</a> – 使用fbs、PyInstaller、cx_Freeze、briefcase、py2exe、Nuitka等工具打包python程序</li>
<li><a href="https://doc.qt.io/qt-6/model-view-programming.html">模型/视图编程</a></li>
<li><a href="https://build-system.fman.io/">fbs</a> – fbs解决了常见的打包和部署问题，基于Python和Qt, fbs是Electron的一个轻量级替代品</li>
<li><a href="https://www.electronjs.org/">electron</a> – 非python。使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序</li>
<li><a href="https://simulatedgreg.gitbooks.io/electron-vue/content/cn/">electron-vue</a> – 非python。 使用vue构建electron应用的模版项目</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
        <category>gui</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>gui</tag>
        <tag>pyside</tag>
      </tags>
  </entry>
  <entry>
    <title>利用github搭建自己的免费博客站点</title>
    <url>/2022/01/22/using-github-to-start-your-blog/</url>
    <content><![CDATA[<p>欢迎访问我的站点： <a href="https://rchardzhu.github.io/">https://rchardzhu.github.io/</a></p>
<h2 id="一、在github上创建一个代码库"><a href="#一、在github上创建一个代码库" class="headerlink" title="一、在github上创建一个代码库"></a>一、在github上创建一个代码库</h2><p>在github上创建一个代码库，名字为：xxx.github.io， xxx为你的github账号名</p>
<p>如我的代码库地址为：<a href="https://github.com/rchardzhu/rchardzhu.github.io">https://github.com/rchardzhu/rchardzhu.github.io</a></p>
<p>参考：<a href="https://docs.github.com/en/pages/quickstart">Quickstart for GitHub Pages - GitHub Docs</a></p>
<h2 id="二、安装nodejs和hexo"><a href="#二、安装nodejs和hexo" class="headerlink" title="二、安装nodejs和hexo"></a>二、安装nodejs和hexo</h2><p>由于github只支持静态网页，需要使用hexo。hexo是基于nodejs打造的一个博客框架，用于快速创建项目、页面、编译、部署 Hexo 博客。</p>
<ul>
<li>先安装nodejs</li>
<li><code>npm install hexo</code>， 然后把hexo的目录放到PATH目录下。或者使用-g 安装到全局目录，但需要管理员权限</li>
</ul>
<h2 id="三、运行hexo"><a href="#三、运行hexo" class="headerlink" title="三、运行hexo"></a>三、运行hexo</h2><ol>
<li><p>创建blog项目，<code>$hexo init blog</code><br>blog目录文件夹下就会出现 Hexo 的初始化文件，包括 themes、scaffolds、source 等文件夹</p>
</li>
<li><p>进入blog目录，生成静态文件：<code>$ cd blog &amp;&amp; hexo generate</code><br>可以看到输出结果里面包含了 js、css、font 等内容，并发现它们都在项目根目录下的 public 文件夹下面了</p>
</li>
<li><p>本地预览查看： <code>$hexo serve</code><br>可以看到一个默认的hello world页面。</p>
</li>
<li><p>部署到github： <code>$ hexo deploy</code><br>编辑_config.yml文件，编辑deploy部分，参考如下<img src="https://pic2.zhimg.com/80/v2-1578f3c362f0896c7dbe3b77e3cc94b1_720w.jpg" alt="图片"></p>
</li>
</ol>
<p>在新创建的blog目录下安装hexo-deployer-git，命令如下： <code>$npm install hexo-deployer-git --save</code></p>
<p>更多信息参考：<a href="https://hexo.io/zh-cn/docs/one-command-deployment.html">部署</a></p>
<p>如果出现如下错误：”ERROR Deployer not found: git”，表明hexo-deployer-git安装的目录不对，记住需要在新创建的目录下npm install。</p>
<h2 id="四、写博客"><a href="#四、写博客" class="headerlink" title="四、写博客"></a>四、写博客</h2><ol>
<li>新建文章 ： <code>$ hexo new &quot;about&quot;</code><br>创建的文章会出现在 source/_posts 文件夹下，是 MarkDown 格式。</li>
</ol>
<p>更多信息参考：<a href="https://hexo.io/zh-cn/docs/writing.html">写作</a></p>
<p>然后正常使用markdown格式去写文章就好了。</p>
<ol start="2">
<li>生成静态文件并更新到github上即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$hexo clean</span><br><span class="line">$hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="更多内容"><a href="#更多内容" class="headerlink" title="更多内容"></a>更多内容</h2><ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/454680697">如何更换博客主题</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/454705927">如何新增标签、分类、关于等页面</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/454840985">如何添加搜索功能?</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/454857343">如何添加留言板功能</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/454865095">本地运行和发布不一致问题解决</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/459178301">添加文章阅读量及网站访问信息</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>使用basictex生成简历</title>
    <url>/2022/02/27/using-latex-generate-resume-md/</url>
    <content><![CDATA[<p>Latex 是功能非常强大的排版工具，<a href="https://www.tug.org/mactex/mactex-download.html">MacTeX 2021</a>有4Gb 大小，之前装过觉得用处不大，这次决定装一个mini版本<a href="https://www.tug.org/mactex/morepackages.html">BasicTex</a>，不用gui的话，功能也够用了</p>
<h2 id="安装basictex"><a href="#安装basictex" class="headerlink" title="安装basictex"></a>安装basictex</h2><p>从<a href="https://www.tug.org/mactex/morepackages.html">BasicTex</a> 官网手动下载pkg文件手动安装。或者使用homebrew安装。</p>
<p>使用 homebrew 安装非常简单，只需一条命令即可。</p>
<p><code>$brew install basictex</code><br>安装完还不能直接使用，还需要把 texlive 添加到环境变量中，才能找到相关的命令。</p>
<p><code>$export PATH=/usr/local/texlive/2021basic/bin/universal-darwin/:$PATH</code><br>执行<code>$xelatex</code>不报错的话，说明环境安装成功。<br>然后就是安装相关的包，以及更新包。</p>
<p><code>sudo tlmgr update --self</code><br>安装包的时候速度慢的话推荐使用<a href="https://mirror.tuna.tsinghua.edu.cn/help/CTAN/">清华的CTAN 镜像</a>。</p>
<h2 id="使用basictex生成简历"><a href="#使用basictex生成简历" class="headerlink" title="使用basictex生成简历"></a>使用basictex生成简历</h2><p>首先到网上找到喜欢的模板。比如： <a href="https://github.com/billryan/resume">billryan/resume</a> 或<a href="https://github.com/xdanaux/moderncv">xdanaux/moderncv</a>。</p>
<p>以billryan/resume 为例，git clone下载到本地后，使用git switch zh_CN 切换到中文分支。</p>
<p>执行： <code>$xelatex resume-zh_CN.tex</code></p>
<p>编译失败，会提示缺少某些包。使用tlmgr安装对应的包即可。</p>
<p>比如： <code>$sudo tlmgr install xifthen ifmtarg titlesec enumitem nth</code></p>
<p>安装完成后，继续xelatex编译即可，会生成resume-zh_CN.pdf 文件。</p>
<p>如果只是偶尔使用一下xelatex，也可以考虑试下xelatex云编译器 <a href="https://latexonline.cc/">cloud compiler LaTeX to PDF</a></p>
<h2 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h2><p>我发文章的几个地方，欢迎大家在朋友圈等地方分享，多多交流。</p>
<ul>
<li>微信公众号：诸葛说talk</li>
<li>知乎：<a href="https://www.zhihu.com/people/richard-zhu/posts">https://www.zhihu.com/people/richard-zhu/posts</a></li>
<li>博客：<a href="https://rchardzhu.github.io/">https://rchardzhu.github.io/</a></li>
</ul>
]]></content>
      <categories>
        <category>latex</category>
        <category>tool</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>latex</tag>
        <tag>resume</tag>
      </tags>
  </entry>
</search>
